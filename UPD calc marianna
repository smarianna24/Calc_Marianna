import java.util.*;



class Main {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);



        System.out.print("Введите выражение: ");

        String input = scanner.nextLine();



        try {

            String result = calc(input);

            System.out.println("Результат: " + result);

        } catch (IllegalArgumentException e) {

            System.out.println("Ошибка: " + e.getMessage());

        }



    }



    public static String calc(String input) {

        String[] parts = input.split(" ");



        if (parts.length != 3) {

            throw new IllegalArgumentException("Неверное количество элементов в выражении");

        }



        String operand1 = parts[0];

        String operator = parts[1];

        String operand2 = parts[2];



        if (!isValidNumber(operand1) || !isValidNumber(operand2)) {

            throw new IllegalArgumentException("Неверный формат чисел");

        }



        int num1 = parseNumber(operand1);

        int num2 = parseNumber(operand2);



        int result;

        switch (operator) {

            case "+":

                result = num1 + num2;

                break;

            case "-":

                result = num1 - num2;

                break;

            case "*":

                result = num1 * num2;

                break;

            case "/":

                if (num2 == 0) {

                    throw new IllegalArgumentException("Деление на ноль запрещено");

                }

                result = num1 / num2;

                break;

            default:

                throw new IllegalArgumentException("Неверная операция: " + operator);

        }



        if (isValidNumber(operand1) && isValidNumber(operand2)) {

            return Integer.toString(result);

        } else {

            throw new IllegalArgumentException("Ошибка: числа должны быть либо арабскими, либо римскими");

        }

    }



    private static boolean isValidNumber(String str) {

        return str.matches("^[1-9]|10$") || str.matches("^[IVXLCDM]+$");

    }



    private static int parseNumber(String str) {

        if (str.matches("^[1-9]|10$")) {

            return Integer.parseInt(str);

        } else {

            return RomanToDecimal(str);

        }

    }



    private static int RomanToDecimal(String roman) {

        Map<Character, Integer> romanValues = new HashMap<>();

        romanValues.put('I', 1);

        romanValues.put('V', 5);

        romanValues.put('X', 10);



        int result = 0;

        int prevValue = 0;



        for (int i = roman.length() - 1; i >= 0; i--) {

            int currentValue = romanValues.get(roman.charAt(i));



            if (currentValue < prevValue) {

                result -= currentValue;

            } else {

                result += currentValue;

            }



            prevValue = currentValue;

        }



        return result;

    }

}



